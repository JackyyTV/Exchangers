plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

import net.minecraftforge.gradle.common.tasks.SignJar

version = "${mc_version}-${mod_version}"
group = "jackyy.${mod_id}"
base {
    archivesName = jar_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mappings_channel, version: mappings_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            if (project.hasProperty('mcUUID')) {
                args '--uuid', project.getProperty('mcUUID')
            }
            if (project.hasProperty('mcUsername')) {
                args '--username', project.getProperty('mcUsername')
            }
            if (project.hasProperty('mcAccessToken')) {
                args '--accessToken', project.getProperty('mcAccessToken')
            }
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.dev'
    }
    maven {
        name = 'Curse Maven'
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("mezz.jei:jei-1.20.1-forge:+")
    //implementation fg.deobf("curse.maven:jade-324717:4614153") //1.20-11.1.4
    implementation fg.deobf("curse.maven:theoneprobe-245211:4629624") //1.20.1-10.0.1

    implementation fg.deobf("curse.maven:gunpowderlib-356646:4573505") //1.20-2.2

    runtimeOnly fg.deobf("curse.maven:ender_io-64578:4719371") //6.0.18-alpha
    //runtimeOnly fg.deobf("curse.maven:mekanism-268560:")
    //runtimeOnly fg.deobf("curse.maven:immersive_engineering-231951:")
    //runtimeOnly fg.deobf("curse.maven:cofh_core-69162:")
    //runtimeOnly fg.deobf("curse.maven:thermal_foundation-222880:")
    //runtimeOnly fg.deobf("curse.maven:thermal_innovation-291737:")
    //runtimeOnly fg.deobf("curse.maven:thermal_expansion-69163:")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mc_version: mc_version, mc_version_range: mc_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, jar_name: jar_name,
            mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": jar_name,
                "Specification-Version": "${mc_version}-${mod_version}",
                "Specification-Vendor": mod_authors,
                "Implementation-Title": jar_name,
                "Implementation-Version": "${mc_version}-${mod_version}",
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

task signJar(type: SignJar, dependsOn: jar) {
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

build.dependsOn signJar

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
}

artifacts {
    archives sourcesJar
    archives deobfJar
}
